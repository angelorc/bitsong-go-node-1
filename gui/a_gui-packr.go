// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package gui

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./html", "index.html", "\"\"")
}
